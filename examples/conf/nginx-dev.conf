worker_processes 16;

events {
  worker_connections 16;
}

env DBPASS;

http {

  include ./mime.types;
		
  access_log /dev/stdout;
  error_log /dev/stderr;
  
  lua_code_cache off;
  lua_need_request_body on;
  lua_socket_log_errors off;
  
  server {
        listen 8880;
        #server_name localhost;
		
        # Access log with buffer, or disable it completetely if unneeded
        access_log logs/dev-www-access.log combined buffer=16k;
        # Error log
        error_log logs/dev-www-error.log;

        location / {
            root   ./www/;
            index  index.html index.htm;
        }
		
		location /api {
			root   ./;
			proxy_pass  http://localhost:8888;
		}
		
    }
  
  server {
    listen 8888;
	add_header Access-Control-Allow-Origin *;
    charset utf-8;
    charset_types application/json;
    default_type application/json;
    
    location / {

	  # Access log with buffer, or disable it completetely if unneeded
		access_log logs/dev-api-access.log combined buffer=16k;
	  # Error log
	    error_log logs/dev-api-error.log;
      
	  resolver 8.8.8.8 valid=10s;
      resolver_timeout 5s;
		
	  
	  content_by_lua_block {
	  
		_NETTLE_LIB_PATH = "/usr/lib64"
	  
		local json = require "cjson"

		-- globals
		requestHandler = nil

		-- handle request	
		local ret = { error=1, result = {}} 	-- bad request
		
		local reqParams = ngx.req.get_uri_args()
		local reqPath = string.gsub(ngx.var.request_uri, "?.*", ""):sub(2)
		local reqMethod = ngx.var.request_method
		local reqData = ngx.req.get_body_data() 
		
		-- check path ----------------------------------
		local path = {}
		for p in string.gmatch(reqPath, '([^/]+)') do
			table.insert(path,p)
		end
		
		-- removes last parameter if its a number 
		-- and puts it into params as id or as uuid
		if tonumber(path[#path]) then
			local param = path[#path]
			path[#path] = nil
			reqPath = table.concat(path,"/")
			if reqParams.id then
				reqParams["uuid"] = tonumber(param) 
			else
				reqParams["id"] = tonumber(param)
			end
		end
		
		-- load endpoint config
		local relay
		local file = io.open("conf/resty.json", 'r')
		if file then
			relay = file:read("*all")
			io.close(file)
		else
			ngx.exit(ngx.HTTP_NOT_FOUND) 
		end
		relay = json.decode(relay)
		
		-- load endpoint handler
		luaFile = relay[reqPath]
		file = io.open(luaFile, 'r')
		if file then
			io.close(file)
			dofile( luaFile )
		else
			ngx.exit(ngx.HTTP_NOT_FOUND) 
		end

		-- execute endpoint
		if type(requestHandler)=="table" then
			local fn = requestHandler[string.lower(reqMethod)]
			if fn and type(fn)=="function" then
				local ran, msg = pcall( fn, { param=reqParams, data=reqData} )
				if not ran then
					msg = { error = msg }
				end
				ret = msg
			else
				ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
			end
			 
		end	

		ngx.say(json.encode(ret)) 
		
		ret = nil
	  }
	  
    }
    
  }
 
}
